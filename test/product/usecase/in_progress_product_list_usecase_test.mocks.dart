// Mocks generated by Mockito 5.4.4 from annotations
// in work_log/test/product/usecase/in_progress_product_list_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:work_log/app/domain/entities/daily_work_for_pdf.dart' as _i5;
import 'package:work_log/app/product/infrastructure/in_progress_product_list_repository.dart'
    as _i2;
import 'package:work_log/setup/database/entities/product_entity.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [InProgressProductListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInProgressProductListRepository extends _i1.Mock
    implements _i2.InProgressProductListRepository {
  MockInProgressProductListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ProductEntity>> fetchInProgressProductList() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchInProgressProductList,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);

  @override
  _i3.Future<void> insertProduct(_i4.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [product],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, dynamic> toMap(_i4.ProductEntity? product) => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [product],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<void> finishProduct({int? id}) => (super.noSuchMethod(
        Invocation.method(
          #finishProduct,
          [],
          {#id: id},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.DailyWorkForPDF>> fetchDailyWorkForPDF(int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyWorkForPDF,
          [productId],
        ),
        returnValue: _i3.Future<List<_i5.DailyWorkForPDF>>.value(
            <_i5.DailyWorkForPDF>[]),
      ) as _i3.Future<List<_i5.DailyWorkForPDF>>);

  @override
  _i3.Future<bool> isDuplicated(String? productName) => (super.noSuchMethod(
        Invocation.method(
          #isDuplicated,
          [productName],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
